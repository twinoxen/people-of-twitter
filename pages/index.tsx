import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { FaTwitter } from 'react-icons/fa';
import {
  Icon,
  Box,
  FormControl,
  FormLabel,
  Input,
  FormHelperText,
  Button,
  useToast,
  Text,
  Link,
  Flex,
  Avatar,
} from '@chakra-ui/react';
import { ExternalLinkIcon } from '@chakra-ui/icons';
import { useState } from 'react';
import { Tweet, User } from '../lib/twitter';
import NextLink from 'next/link';
import axios from 'axios';

const Home: NextPage = () => {
  const [bearerToken, setBearerToken] = useState('');
  const [term, setTerm] = useState('');
  const [userTerms, setUserTerms] = useState('');
  const [results, setResults] = useState<
    { tweet: Tweet; users: User[]; link: string }[]
  >([]);
  const [isLoading, setIsLoading] = useState(false);

  const toast = useToast();

  const handleSearch = async () => {
    if (!bearerToken || !term || !userTerms) {
      toast({
        title: 'Missing required fields',
        description:
          'Missing either: bearer token, search term, or user terms.',
        status: 'info',
        duration: 9000,
        isClosable: true,
      });

      return;
    }

    try {
      setResults([]);
      setIsLoading(true);

      const response = await axios.post('/api/tweets', {
        service: 'searchTwitter',
        method: 'searchTwitter',
        data: {
          bearerToken,
          term,
          userTerms,
        },
      });

      setResults(response.data.data);
      setIsLoading(false);
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        status: 'error',
        duration: 9000,
        isClosable: true,
      });
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>People of Twitter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          People of Twitter <Icon as={FaTwitter} />
        </h1>

        <Box mt={20} mb={20}>
          <FormControl pb={10}>
            <FormLabel htmlFor="term">Twitter API Bearer token</FormLabel>
            <Input
              id="token"
              type="token"
              onChange={(event) => setBearerToken(event.target.value)}
            />
          </FormControl>
          <FormControl pb={10}>
            <FormLabel htmlFor="term">Search term</FormLabel>
            <Input
              id="term"
              type="term"
              onChange={(event) => setTerm(event.target.value)}
            />
            <FormHelperText>Single term</FormHelperText>
          </FormControl>
          <FormControl pb={10}>
            <FormLabel htmlFor="userTerm">
              Terms to look for in users profile
            </FormLabel>
            <Input
              id="userTerm"
              type="userTerm"
              onChange={(event) => setUserTerms(event.target.value)}
            />
            <FormHelperText>
              A comma delimited list of words to look for in a users profile
            </FormHelperText>
          </FormControl>
          <FormControl textAlign="right">
            <Button isLoading={isLoading} onClick={handleSearch}>
              Search
            </Button>
          </FormControl>
        </Box>
        {results.length > 0 &&
          results.map((result, index) => (
            <Box
              key={index}
              mb={5}
              p={5}
              borderWidth={1}
              borderRadius={10}
              w="2xl"
              backgroundColor="blue.100"
            >
              <Box>
                <Box>
                  <Text>{result.tweet.text}</Text>
                </Box>
                <Box textAlign="right" mb={5}>
                  <NextLink href={result.link} passHref>
                    <Link target="_blank">
                      Link to tweet <ExternalLinkIcon />
                    </Link>
                  </NextLink>
                </Box>
              </Box>
              <Box>
                {result.users.length > 0 ? (
                  result.users.map((user, userIndex) => (
                    <Box
                      key={userIndex}
                      p={5}
                      backgroundColor="blue.200"
                      mb={5}
                      borderRadius={10}
                    >
                      <Flex alignItems="center">
                        <Box mr={3}>
                          <Avatar src={user.profile_image_url} />
                        </Box>
                        <Flex mr={3}>
                          <NextLink
                            href={`https://twitter.com/${user.username}`}
                            passHref
                          >
                            <Link>@{user.username}</Link>
                          </NextLink>
                        </Flex>
                      </Flex>
                      <Box mt={3}>
                        <Text>{user.description}</Text>
                      </Box>
                    </Box>
                  ))
                ) : (
                  <Text>No users met the user term criteria.</Text>
                )}
              </Box>
            </Box>
          ))}
      </main>
    </div>
  );
};

export default Home;
